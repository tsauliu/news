#!/usr/bin/env python3
# Generate Chinese email in MHT format with all content

import os
import base64
import quopri
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Test with specific date
test_date = '2025-08-29'

# Create output directory
os.makedirs('data/7_emails', exist_ok=True)

# Read all data sources
key_takeaway = open(f'data/6_final_mds/{test_date}_key_takeaway.md', 'r', encoding='utf-8').read()
sellside = open(f'data/6_final_mds/{test_date}_sellside_highlights.md', 'r', encoding='utf-8').read()

# Read all podcast summaries
podcast_content = []
podcast_dir = f'podcast/{test_date}'
for file in sorted(os.listdir(podcast_dir)):
    if file.endswith('.md'):
        content = open(f'{podcast_dir}/{file}', 'r', encoding='utf-8').read()
        podcast_content.append(f"### {file.replace('.md', '')}\n\n{content}")

# Convert markdown to formatted HTML with proper Chinese support
def md_to_html_formatted(text):
    html_parts = []
    lines = text.split('\n')
    
    for line in lines:
        if line.startswith('## '):
            html_parts.append(f'<h3 style="color:#2c3e50;margin-top:20px">{line[3:]}</h3>')
        elif line.startswith('### '):
            html_parts.append(f'<h4 style="color:#34495e;margin-top:15px">{line[4:]}</h4>')
        elif line.startswith('# '):
            html_parts.append(f'<h2 style="color:#2c3e50;border-bottom:2px solid #3498db;padding-bottom:10px">{line[2:]}</h2>')
        elif line.startswith('- '):
            html_parts.append(f'<li style="margin:8px 0">{line[2:]}</li>')
        elif line.strip().startswith('[') and '](' in line:
            # Handle markdown links
            import re
            link_pattern = r'\[([^\]]+)\]\(([^\)]+)\)'
            line = re.sub(link_pattern, r'<a href="\2" style="color:#3498db;text-decoration:none">\1</a>', line)
            if line.strip():
                html_parts.append(f'<p>{line}</p>')
        elif line.strip():
            # Handle bold text
            line = line.replace('**', '<strong>').replace('*', '<em>')
            html_parts.append(f'<p>{line}</p>')
    
    return '\n'.join(html_parts)

# Generate HTML body
html_body = f"""<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<style>
body {{ 
    font-family: "Microsoft YaHei", "微软雅黑", Arial, sans-serif; 
    max-width: 900px; 
    margin: 0 auto; 
    padding: 20px;
    color: #333;
}}
.header {{
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 10px;
    text-align: center;
    margin-bottom: 30px;
}}
.section {{
    margin: 30px 0;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 8px;
}}
h1 {{ margin: 0; font-size: 28px; }}
h2 {{ color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }}
h3 {{ color: #34495e; margin-top: 25px; }}
h4 {{ color: #7f8c8d; margin-top: 20px; }}
li {{ margin: 8px 0; line-height: 1.8; }}
a {{ color: #3498db; text-decoration: none; }}
a:hover {{ text-decoration: underline; }}
.footer {{
    text-align: center;
    margin-top: 40px;
    padding: 20px;
    background: #ecf0f1;
    border-radius: 8px;
    color: #7f8c8d;
}}
</style>
</head>
<body>

<div class="header">
<h1>自动驾驶 AI 行业周报</h1>
<p style="font-size: 18px; margin: 10px 0;">Weekly Autonomous Driving AI News Update</p>
<p style="font-size: 16px; margin: 5px 0;">报告周期：{test_date}</p>
</div>

<div class="section">
<h2>第一部分：本周关键要点 | Key Takeaways</h2>
{md_to_html_formatted(key_takeaway)}
</div>

<div class="section">
<h2>第二部分：券商研报精选 | Sellside Research Highlights</h2>
{md_to_html_formatted(sellside)}
</div>

<div class="section">
<h2>第三部分：播客内容摘要 | Podcast Summary</h2>
{''.join([md_to_html_formatted(pc) for pc in podcast_content])}
</div>

<div class="footer">
<p><strong>BDA AutoNews System</strong></p>
<p>此报告由 BDA 自动化新闻系统生成</p>
<p>Generated by BDA Automated News System</p>
</div>

</body>
</html>"""

# Create MHT file with proper MIME structure
def create_mht(html_content, output_path):
    # Generate boundary
    boundary = "----=_NextPart_001_0000_01DC0000.00000000"
    
    # Convert HTML to GB2312 and then to quoted-printable
    try:
        html_gb2312 = html_content.encode('gb2312', errors='ignore')
    except:
        # Fallback to UTF-8 if GB2312 fails
        html_gb2312 = html_content.encode('utf-8', errors='ignore')
    
    html_quoted = quopri.encodestring(html_gb2312).decode('ascii')
    
    # Build MHT content
    mht_content = f"""MIME-Version: 1.0
Content-Type: multipart/related; boundary="{boundary}"

This document is a Single File Web Page, also known as a Web Archive file.

--{boundary}
Content-Location: file:///C:/AutoNews/email.htm
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="gb2312"

{html_quoted}

--{boundary}--
"""
    
    # Write MHT file
    with open(output_path, 'w', encoding='ascii') as f:
        f.write(mht_content)

# Generate MHT email
output_file = f'data/7_emails/{test_date}_email_chinese.mht'
create_mht(html_body, output_file)

print(f"✅ MHT Email generated: {output_file}")
print(f"📊 Content included:")
print(f"   - Key takeaways: {len(key_takeaway.split('\\n'))} lines")
print(f"   - Sellside reports: {len(sellside.split('\\n'))} lines")
print(f"   - Podcast summaries: {len(podcast_content)} podcasts")